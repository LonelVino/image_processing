% decomp_2d.m

function Y=decomp_2d(X,recurs,h0,h1)
% si deux argument, on prend la (9,7)
if nargin==2
    h0=[...
            +0.026748757410810;...
            -0.016864118442875;...
            -0.078223266528990;...
            +0.266864118442875;...
            +0.602949018236360;...
            +0.266864118442875;...
            -0.078223266528990;...
            -0.016864118442875;...
            +0.026748757410810...
        ];
    h1=[...
            +0.091271763114250;...
            -0.057543526228500;...
            -0.591271763114250;...
            +1.115087052457000;...
            -0.591271763114250;...
            -0.057543526228500;...
            +0.091271763114250...
         ];            
end
if recurs >= 1
    [LIG,COL]=size(X);
    for lig=1:LIG
        ligne=X(lig,:);
        [x0,x1]=decomp_1d(ligne',h0,h1);
        X(lig,:)=[x0' x1'];
    end
    for col=1:COL
        colonne=X(:,col);
        [x0,x1]=decomp_1d(colonne,h0,h1);
        X(:,col)=[x0;x1];
    end
    X(1:floor((LIG+1)/2),1:floor((COL+1)/2))=decomp_2d(X(1:floor((LIG+1)/2),1:floor((COL+1)/2)),recurs-1,h0,h1);
end
Y=X;